// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------------------ //
// ads8353_conversion //
// ------------------ //

#define ads8353_conversion_wrap_target 1
#define ads8353_conversion_wrap 8

static const uint16_t ads8353_conversion_program_instructions[] = {
    0x7820, //  0: out    x, 32           side 3     
            //     .wrap_target
    0x1842, //  1: jmp    x--, 2          side 3     
    0xf84f, //  2: set    y, 15           side 3     
    0x1020, //  3: jmp    !x, 0           side 2     
    0x0083, //  4: jmp    y--, 3          side 0     
    0xf04e, //  5: set    y, 14           side 2     
    0x4002, //  6: in     pins, 2         side 0     
    0x1086, //  7: jmp    y--, 6          side 2     
    0x4002, //  8: in     pins, 2         side 0     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program ads8353_conversion_program = {
    .instructions = ads8353_conversion_program_instructions,
    .length = 9,
    .origin = -1,
};

static inline pio_sm_config ads8353_conversion_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + ads8353_conversion_wrap_target, offset + ads8353_conversion_wrap);
    sm_config_set_sideset(&c, 2, false, false);
    return c;
}

static inline pio_sm_config ads8353_conversion_init(PIO pio, 
                                      uint sm, 
                                      uint offset, 
                                      uint sdo_base,
                                      uint sideset_base) {
    pio_sm_config c =  ads8353_conversion_program_get_default_config(offset);
    // Set sideset (SCLK/CS)
    sm_config_set_sideset_pins(&c, sideset_base);
    pio_gpio_init(pio, sideset_base);
    pio_gpio_init(pio, sideset_base+1);
    pio_sm_set_consecutive_pindirs(pio, sm, sideset_base, 2, true);
    // Set input Shift to LSB
    sm_config_set_out_shift(&c, false, true, 32);
    // Set input (SDO)
    sm_config_set_in_pins(&c, sdo_base);
    pio_gpio_init(pio, sdo_base);
    pio_gpio_init(pio, sdo_base+1);
    pio_sm_set_consecutive_pindirs(pio, sm, sdo_base, 2, false);
    sm_config_set_in_shift(&c, false, true, 32);    // do LSR to preserve bit order
    // Set Hz to 40 MHz
    sm_config_set_clkdiv_int_frac(&c, 3, 32);
    return c;
}

#endif
